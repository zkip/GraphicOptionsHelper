let state = {
	items: [],
}

fn fetchItems() { ... }

const state = {
	user: {
		token: ""
	}
}

type App like Element{

	frag {
		Header
		
	}
}

type Header like Element {

	frag {
		wrapper: div {
			logo: Logo
			menu: Menu items = 
		}
	}
}

type Menu like Element {
	- items		[]string
	- current	uint
	- tips		string
	
	- handle_click({ target }) {
		const root_node = $( #root )[0]
		current = root_node.getOrder( target )
	}

	$( #root > li > * ) {
		style {
			pointerEvents = "none"
		}
	}

	frag {
		root: ul {
			div .title toString(current)
			div .subTitle toString(current) {
				ul {
					li "Something 1..."
					li "Something 2..."
				}
				ul {
					li "Someone..."
				}
			}

			@if current == 0 {
				div .tip tips
			}

			@if items.length > 3 {
				@for items as item, idx {
					li	(
						tag = idx == current ? "current" : ""
						) {
						span .label item
					}
				}
			} else {
				span "..."
			}

			@{
				i := Math.random()
			}

			@if i > 0.2 {
				span toString(i)
			}
		}
	}

	onMounted( ) {
		$( #root ) {
			addEventListener( "click", handle_click )
		}
	}

	onDestroyed( ) {
		$( #root ) {
			removeEventListener( "click", handle_click )
		}
	}

	( ) {
		items = fetchSomething( "..." )
	}
	
}

type Body { }